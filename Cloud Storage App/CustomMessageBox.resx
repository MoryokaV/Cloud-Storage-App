<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>